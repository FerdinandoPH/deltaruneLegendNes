# VRC6 mapping description:
# $6000-$7FFF: 8KB of fixed PRG-RAM
# $8000-$BFFF: 16KB of switchable PRG-ROM (I used it for the game code and the music code, and I switch from one to the other)
# $C000-$DFFF: 8KB of switchable PRG-ROM (I used it for DPCM)
# $E000-$FFFF: 8KB of fixed PRG-ROM (I used it for IRQ handlers, the startup code and the music engine code)

#In case you're lost, here's how this file works:

#Memory: Here we set different memory sections: Their start, size, read/write capabilities...
# If multiple areas are defined with the same start, they are written sequentially in the ROM, and it's your job to select which one you want at any time (that's the power of mapping)
# Also keep in mind that the order of definition is crucial for the position in the ROM. For example, PRGFIXED needs to be defined last, since VRC6 will load the last 8KB bank at startup


#Sections: This is how you tell the linker (a part of the compiler) where to put your code/assets in the ROM
#Afterwards, in your .s/.c files, you specify the sections of your assets.
#This is very important. For example, you need your startup/IRQ code to be in the fixed asset, and you need to make sure that there are not problematic overlaps.
# For example, if I put my music engine code in the same bank as my game code, but then I need to change that address space to load the music code, I get in trouble, since I can't have my music code and my music engine code at the same time. That's why I put my music engine code in the fixed bank.
# Be careful with not overflowing a certain section, otherwise your code won't compile.

# Symbols: These are just the specs of your game
MEMORY {
#RAM Addresses:
    # Zero page
    ZP: start = $00, size = $100, type = rw, define = yes;
	#note, the c compiler + neslib + famistudio use about 60 zp addresses, I think
	
	#note OAM: start = $0200, size = $0100, define = yes;
	#note, sprites stored here in the RAM
	
	RAM: start = $0300, size = $0400, define = yes;
	#note, I located the c stack at 700-7ff, see below
	
	WRAM: start = $6000, size = $2000, define = yes;

#INES Header:
    HEADER: start = $0, size = $10, file = %O ,fill = yes;


#ROM Addresses:

	PRG0:  start = $8000, size = $4000, file = %O, fill = yes, define = yes, fillval = $0;
	PRG1:  start = $8000, size = $4000, file = %O, fill = yes, define = yes, fillval = $1;
	PRG2:  start = $8000, size = $4000, file = %O, fill = yes, define = yes, fillval = $2;
	PRG3:  start = $8000, size = $4000, file = %O, fill = yes, define = yes, fillval = $3;
	PRG4:  start = $8000, size = $4000, file = %O, fill = yes, define = yes, fillval = $4;
	PRG5:  start = $C000, size = $2000, file = %O, fill = yes, define = yes, fillval = $5;
	PRG6:  start = $C000, size = $2000, file = %O, fill = yes, define = yes, fillval = $6;
	PRG: start = $8000, size = $4000, file = %O, fill = yes, define = yes, fillval = $7;

    IDONTREALLYNEEDTHIS: start = $c000, size = $2000, file = %O ,fill = yes, define = yes, fillval = $9;
	PRGFIXED: start = $e000, size = $2000, file = %O ,fill = yes, define = yes, fillval = $A;
# make sure the reset code is in e000-ffff, see below	



# ! 16 Banks of 8K CHR ROM
    CHR: start = $0000, size = $20000, file = %O, fill = yes, fillval = $C;
}




SEGMENTS {
    HEADER:   load = HEADER,         type = ro;
    
# this needs to be in the fixed bank between e000 and ffff
    LOWCODE:  load = PRG,            type = ro,                optional = yes;
    INIT:     load = PRG,            type = ro,  define = yes, optional = yes;
    CODE:     load = PRG,            type = ro,  define = yes;
    RODATA:   load = PRG,            type = ro,  define = yes;
    DATA:     load = PRG, run = RAM, type = rw,  define = yes;
    CHARS:    load = CHR,            type = rw;
    BSS:      load = RAM,            type = bss, define = yes;
    HEAP:     load = RAM,            type = bss, optional = yes;
    ZEROPAGE: load = ZP,             type = zp;
    ONCE:     load = PRG,            type = ro,  define = yes;
	
	XRAM:	  load = WRAM,			 type = bss, define = yes;
	
	MUSIC:    load = PRG0,           type = ro, define = yes;
	BANK1:    load = PRG1,           type = ro, define = yes;
	BANK2:    load = PRG2,           type = ro, define = yes;
	BANK3:    load = PRG3,           type = ro, define = yes;
	BANK4:    load = PRG4,           type = ro, define = yes;

	STARTUP:  load = PRGFIXED,          type = ro, define = yes;
	MUSICCODE: load = PRGFIXED, type = ro, define = yes;
	
	SAMPLES0:  load = PRG5, type = ro;
	SAMPLES1:  load = PRG6, type = ro;
	VECTORS:  load = PRGFIXED, start = $fffa, type = ro;
}




FEATURES {
    CONDES: segment = INIT,
        type = constructor,
        label = __CONSTRUCTOR_TABLE__,
        count = __CONSTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
        type = destructor,
        label = __DESTRUCTOR_TABLE__,
        count = __DESTRUCTOR_COUNT__;
    CONDES: type = interruptor,
        segment = RODATA,
        label = __INTERRUPTOR_TABLE__,
        count = __INTERRUPTOR_COUNT__;
}




SYMBOLS {

    __STACKSIZE__: type = weak, value = $0100;     # 1 page stack
	__STACK_START__: type = weak, value = $0700;
	
	NES_MAPPER:	  type = weak, value = 24; 			# mapper number, 4 = mmc3, txrom
	NES_PRG_BANKS:	 type = weak,  value = 8; 			# number of 16K PRG banks, = 128k
	NES_CHR_BANKS:	  type = weak, value = 16; 			# number of 8K CHR banks, = 128k
	NES_MIRRORING:	  type = weak, value = 0; 			# 0 horizontal, 1 vertical, 8 four screen, mmc3 can switch mirroring
	
}

